generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                   String          @id @default(nanoid())
  name                 String
  email                String?         @unique
  emailVerified        DateTime?
  image                String?
  preferences          UserPreference?
  accounts             Account[]
  sessions             Session[]
  chats                Chat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, createdAt])
}

model UserPreference {
  id        String  @id @default(nanoid())
  theme     String
  mode      String
  radius    String
  layout    String
  direction String
  user      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String? @unique
}

model Account {
  id                String  @id @default(nanoid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(nanoid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Chat {
  id         String     @id @default(uuid())
  title      String
  userId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User       @relation(fields: [userId], references: [id])
  messages    Message[]
  streams     Stream[]
  deprecatedMessages MessageDeprecated[]
}

model MessageDeprecated {
  id        String   @id @default(uuid())
  chatId    String
  role      String
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat      Chat     @relation(fields: [chatId], references: [id])
}

model Message {
  id          String   @id @default(uuid())
  chatId      String
  role        String
  parts       Json
  attachments Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat        Chat     @relation(fields: [chatId], references: [id])
}

model Stream {
  id        String   @id @default(uuid())
  chatId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat      Chat     @relation(fields: [chatId], references: [id])
}
